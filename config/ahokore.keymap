/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "funberg/se_us.dtsi"
#include "funberg/homerow_mods.dtsi"
#include "funberg/tapdances.dtsi"

#define CDE   1
#define NUM   2
#define NAV   3
#define ADJ   4
#define GAM   5

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <CDE NUM>;
            then-layer = <ADJ>;
        };
    };

    behaviors {
        ltr: behavior_layer_tap_retro {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_RETRO";
            #binding-cells = <2>;
            flavor = "balanced";
            retro-tap;
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        ltl: behavior_layer_tap_retro {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_RETRO";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q       &kp W       &kp E       &kp R        &kp T          &kp Y   &kp U         &kp I            &kp O       &kp P
&lhm LSFT A &lhm LCTL S &lhm LALT D &lhm LGUI F  &kp G          &kp H   &rhm RGUI J   &rhm RALT K      &rhm RCTL L &rhm_scln RSFT SE_SCLN
&tdZ        &tdX        &tdC        &tdV         &tdB           &kp N   &kp M         &us_comma_mac    &us_dot     &us_slash
                        &kp TAB     &mo NUM      &lt NAV BKSP   &kp SPC &mo CDE       &kp RET
            >;
        };

        code_layer {
            bindings = <
&kp BANG  &kp SE_AT &kp HASH         &kp SE_DLR       &kp PRCNT            &kp SE_CIRC  &kp SE_AMPR  &kp SE_ASTR &kp SE_UNDS      &kp SE_MINS
&kp TAB   &none     &kp SE_LCBR_MAC  &kp SE_LBRC_MAC  &kp SE_LABK_MAC      &none        &kp SE_LPRN  &kp SE_EQL  &kp SE_PIPE_MAC  &kp SE_DQUO
&none     &none     &kp SE_RCBR_MAC  &kp SE_RBRC_MAC  &kp SE_RABK          &none        &kp SE_RPRN  &kp SE_PLUS &kp SE_BSLS_MAC  &kp SE_QUOT
                    &trans           &trans           &trans               &trans       &trans       &trans
            >;
        };

        num_layer {
            bindings = <
&kp F1    &kp F2    &kp F3    &kp F4    &kp F5           &none       &kp N7  &kp N8   &kp N9   &kp SE_ARNG
&kp F6    &kp F7    &kp F8    &kp F9    &kp F10          &kp SE_MINS &kp N4  &kp N5   &kp N6   &kp SE_ADIA
&none     &none     &none     &none     &none            &kp SE_PLUS &kp N1  &kp N2   &kp N3   &kp SE_ODIA
                    &trans    &trans    &kp RET          &kp N0      &trans  &us_dot
            >;
        };

        nav_layer {
            bindings = <
&kp ESC  &none    &none    &none    &none      &kp PG_UP &kp HOME &kp UARW &kp END  &kp BKSP
&kp LSFT &kp LCTL &kp RALT &kp LGUI &none      &kp PG_DN &kp LARW &kp DARW &kp RARW &kp DEL
&none    &none    &none    &none    &none      &kp Z     &kp X    &kp C    &kp V    &kp RET
                  &trans   &trans   &trans     &trans    &trans   &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &none &none  &none  &none       &none  &none  &none &none &tog GAM
&bt BT_SEL 0 &none &none  &none  &none       &none  &none  &none &none &none
&bt BT_SEL 1 &none &none  &none  &none       &none  &none  &none &none &none
                   &trans &trans &trans      &trans &trans &trans
            >;
        };

        game_layer {
            bindings = <
&kp TAB  &kp Q  &kp W  &kp E  &kp R          &none &none &none &none &tog GAM
&kp LSFT &kp A  &kp S  &kp D  &kp F          &none &none &none &none &none
&kp LCTL &kp Z  &kp X  &kp C  &kp V          &none &none &none &none &none
                &kp N1 &kp N2 &kp SPC        &none &none &none
            >;
        };

    };
};